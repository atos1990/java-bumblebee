/* Generated By:JavaCC: Do not edit this line. DTOELParserTokenManager.java */
package com.googlecode.bumblebee.dto.el.parser;

public class DTOELParserTokenManager implements DTOELParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x140L) != 0L) {
                    jjmatchedKind = 12;
                    return 2;
                }
                if ((active0 & 0x80L) != 0L)
                    return 1;
                return -1;
            case 1:
                if ((active0 & 0x140L) != 0L) {
                    jjmatchedKind = 12;
                    jjmatchedPos = 1;
                    return 2;
                }
                return -1;
            case 2:
                if ((active0 & 0x140L) != 0L) {
                    jjmatchedKind = 12;
                    jjmatchedPos = 2;
                    return 2;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 46:
                return jjStartNfaWithStates_0(0, 7, 1);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x40L);
            default:
                return jjMoveNfa_0(3, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x40L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x100L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x40L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x100L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 108:
                if ((active0 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(3, 8, 2);
                break;
            case 115:
                if ((active0 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(3, 6, 2);
                break;
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {
            0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
    };
    static final long[] jjbitVec2 = {
            0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec3 = {
            0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L
    };
    static final long[] jjbitVec4 = {
            0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
    };
    static final long[] jjbitVec5 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0x33fffffffff7fffL
    };
    static final long[] jjbitVec6 = {
            0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
    };
    static final long[] jjbitVec7 = {
            0x7fffffe00000000L, 0xffffc00001ffffffL, 0xffffffffffffffffL, 0x9fffc1e03fefffffL
    };
    static final long[] jjbitVec8 = {
            0xffffffffffff0000L, 0xe7ffL, 0x3ffffffffffffL, 0x0L
    };
    static final long[] jjbitVec9 = {
            0xe3fffffffffffff0L, 0xfff1f3fffL, 0xe3c5fdfffff99fe0L, 0xf000fb000001fL
    };
    static final long[] jjbitVec10 = {
            0x36dfdfffff987e0L, 0x1c00005e000000L, 0xe3edfdfffffbbfe0L, 0x2000f0001003fL
    };
    static final long[] jjbitVec11 = {
            0xe3edfdfffff99fe0L, 0x20003b000000fL, 0x3bfc718d63dc7e8L, 0x200000000000000L
    };
    static final long[] jjbitVec12 = {
            0x3effdfffffddfe0L, 0x300000000L, 0xe3effdfffffddfe0L, 0x34000001fL
    };
    static final long[] jjbitVec13 = {
            0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
    };
    static final long[] jjbitVec14 = {
            0x87fffffffffffffeL, 0x7fffL, 0x23ffecaefef02596L, 0x3000005fL
    };
    static final long[] jjbitVec15 = {
            0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
    };
    static final long[] jjbitVec16 = {
            0x6fbffffffffL, 0x3ff0000L, 0xffffffff00000000L, 0x1ffffffffff003fL
    };
    static final long[] jjbitVec17 = {
            0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
    };
    static final long[] jjbitVec18 = {
            0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
    };
    static final long[] jjbitVec19 = {
            0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
    };
    static final long[] jjbitVec20 = {
            0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec21 = {
            0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x1c7ffffffffffL
    };
    static final long[] jjbitVec22 = {
            0x1fffff001fdfffL, 0x1dfff000fffffL, 0xffffffffffffffffL, 0x388fffffL
    };
    static final long[] jjbitVec23 = {
            0xffffffff00000000L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
    };
    static final long[] jjbitVec24 = {
            0x1fffffffL, 0x1f3fffffff0000L, 0x0L, 0x0L
    };
    static final long[] jjbitVec25 = {
            0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L
    };
    static final long[] jjbitVec26 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
    };
    static final long[] jjbitVec27 = {
            0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
    };
    static final long[] jjbitVec28 = {
            0x8000000000000000L, 0x8002000000100001L, 0x3ffff00000000L, 0x0L
    };
    static final long[] jjbitVec29 = {
            0xe3fbbd503e2ffc84L, 0xffffffff000003e0L, 0xfL, 0x0L
    };
    static final long[] jjbitVec30 = {
            0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec31 = {
            0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0xffff000000000000L
    };
    static final long[] jjbitVec32 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
    };
    static final long[] jjbitVec33 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
    };
    static final long[] jjbitVec34 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
    };
    static final long[] jjbitVec35 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
    };
    static final long[] jjbitVec36 = {
            0xffff3fffffffffffL, 0x7ffffffffffL, 0x0L, 0x0L
    };
    static final long[] jjbitVec37 = {
            0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
    };
    static final long[] jjbitVec38 = {
            0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0x1fff0000000000ffL
    };
    static final long[] jjbitVec39 = {
            0x18000000000000L, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
    };
    static final long[] jjbitVec40 = {
            0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
    };
    static final long[] jjbitVec41 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 16;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 10)
                                    kind = 10;
                                jjCheckNAddStates(0, 4);
                            } else if (curChar == 39)
                                jjCheckNAddStates(5, 7);
                            else if (curChar == 36) {
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAdd(2);
                            } else if (curChar == 46)
                                jjCheckNAdd(1);
                            break;
                        case 0:
                            if (curChar == 46)
                                jjCheckNAdd(1);
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 11)
                                kind = 11;
                            jjCheckNAdd(1);
                            break;
                        case 2:
                            if (curChar != 36)
                                break;
                            if (kind > 12)
                                kind = 12;
                            jjCheckNAdd(2);
                            break;
                        case 4:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                jjCheckNAddStates(5, 7);
                            break;
                        case 5:
                            if (curChar == 39)
                                jjCheckNAddStates(5, 7);
                            break;
                        case 7:
                            if (curChar == 39 && kind > 13)
                                kind = 13;
                            break;
                        case 9:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjAddStates(8, 9);
                            break;
                        case 11:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 10)
                                kind = 10;
                            jjCheckNAddStates(0, 4);
                            break;
                        case 12:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(12, 13);
                            break;
                        case 14:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 10)
                                kind = 10;
                            jjCheckNAdd(14);
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(15, 0);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAdd(2);
                            } else if (curChar == 123)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 2:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                            jjCheckNAdd(2);
                            break;
                        case 4:
                            jjAddStates(5, 7);
                            break;
                        case 6:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 8:
                            if (curChar == 123)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 10:
                            if (curChar == 125 && kind > 14)
                                kind = 14;
                            break;
                        case 13:
                            if ((0x100000001000L & l) != 0L && kind > 9)
                                kind = 9;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                        case 2:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 12)
                                kind = 12;
                            jjCheckNAdd(2);
                            break;
                        case 4:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjAddStates(5, 7);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            12, 13, 14, 15, 0, 4, 6, 7, 9, 10,
    };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec3[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec9[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec10[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec11[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec12[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec13[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec14[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec15[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec16[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec17[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec18[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec20[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec21[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec23[i2] & l2) != 0L);
            case 25:
                return ((jjbitVec24[i2] & l2) != 0L);
            case 29:
                return ((jjbitVec25[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec27[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec29[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec31[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec36[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec37[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec38[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec39[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec40[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec41[i2] & l2) != 0L);
            default:
                if ((jjbitVec20[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, null, "\164\150\151\163", "\56",
            "\156\165\154\154", null, null, null, null, null, null,};
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final long[] jjtoToken = {
            0x7fc1L,
    };
    static final long[] jjtoSkip = {
            0x3eL,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[16];
    private final int[] jjstateSet = new int[32];
    protected char curChar;

    public DTOELParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public DTOELParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 16; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

}
